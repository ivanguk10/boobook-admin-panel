{"version":3,"sources":["./src/app/components/books/book-item/book-item.component.ts","./src/app/components/books/book-item/book-item.component.html","./src/app/components/menu/menu.component.ts","./src/app/components/menu/menu.component.html","./src/app/alert/alert.component.ts","./src/app/alert/alert.component.html","./src/@core/services/base.api.service.ts","./src/app/dropdown.directive.ts","./src/environments/environment.ts","./src/@core/components/handle.alert.ts","./src/@core/models/book.upload.model.ts","./src/app/components/authors/room-list/author-add/author-add.component.ts","./src/app/components/authors/room-list/author-add/author-add.component.html","./src/app/auth/auth.component.ts","./src/app/auth/auth.component.html","./src/app/auth/auth.guard.ts","./src/@core/models/order.model.ts","./src/@core/models/author.model.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/@core/services/order.service.ts","./src/app/components/books/book-add/book-add.component.ts","./src/app/components/books/book-add/book-add.component.html","./src/app/app.module.ts","./src/@core/constants/endpoints.ts","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html","./src/app/header/header.component.html","./src/app/header/header.component.ts","./src/app/components/authors/room-list/author-update/author-update.component.ts","./src/app/components/authors/room-list/author-update/author-update.component.html","./src/app/components/orders/room-list/order-list.component.html","./src/app/components/orders/room-list/order-list.component.ts","./src/app/components/authors/room-list/author-list.component.html","./src/app/components/authors/room-list/author-list.component.ts","./src/@core/models/reuest.user.model.ts","./src/@core/services/book.service.ts","./src/app/components/books/book-update/book-update.component.ts","./src/app/components/books/book-update/book-update.component.html","./src/app/components/orders/room-list/order-item/order-item.component.html","./src/app/components/orders/room-list/order-item/order-item.component.ts","./src/@core/services/author.service.ts","./src/app/components/books/book-list.component.html","./src/app/components/books/book-list.component.ts","./src/app/components/authors/room-list/author-item/author-item.component.ts","./src/app/components/authors/room-list/author-item/author-item.component.html","./src/@core/services/user.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { Router } from '@angular/router';\nimport {BookModel} from '../../../../@core/models/book.model';\nimport {BookService} from '../../../../@core/services/book.service';\n\n@Component({\n  selector: 'app-room-item',\n  templateUrl: './book-item.component.html',\n  styleUrls: ['./book-item.component.css'],\n})\nexport class BookItemComponent implements OnInit {\n  @Input() book: BookModel;\n\n  @Output()\n  OnDelete: EventEmitter<any> = new EventEmitter();\n\n  constructor(private bookService: BookService, private router: Router\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  public onDeleteClick(): void{\n    this.bookService.deleteBook(this.book.id).subscribe(val => val);\n    this.OnDelete.emit();\n  }\n\n  public onUpdateClick(): void {\n    this.router.navigate(['books/update', this.book.id]);\n  }\n}\n","<div class=\"list-group-item field\">\n    <div class=\"room-field\">\n        <div class=\"image-part\">\n          <img src=\"data:image/png;base64,{{book.image}}\" alt=\"book image\">\n        </div>\n        <div class=\"text-part\">\n          <p><b>Book name:</b> {{book.name}} </p>\n          <p><b>Description:</b> {{book.description}}</p>\n          <p><b>Price:</b> {{book.price}}</p>\n          <p><b>Author:</b> {{book.author.name}}</p>\n          <button class=\"btn btn-outline-success\" type=\"button\" (click)=\"onUpdateClick()\">Update</button>\n          <button class=\"btn btn-outline-danger\" style=\"margin-top: 10px\" type=\"button\" (click)=\"onDeleteClick()\">Delete</button>\n        </div>\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\n\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\n\nexport class MenuComponent implements OnInit {\n  error: string = null;\n  signupForm: FormGroup;\n  constructor(private http: HttpClient, private router: Router) {}\n\n\n  ngOnInit(): void {\n  }\n\n  public onAuthorClick(e: Event): void{\n    e.preventDefault();\n    this.router.navigate(['/authors']);\n  }\n\n  public onBookClick(e: Event): void{\n    e.preventDefault();\n    this.router.navigate(['/books']);\n  }\n\n  public onOrderClick(e: Event): void{\n    e.preventDefault();\n    this.router.navigate(['/orders']);\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n    <div class=\"row signup-field\">\n        <a href=\"#\" (click)=\"onAuthorClick($event)\">Authors</a>\n      <br/>\n        <a href=\"#\" (click)=\"onBookClick($event)\">Books</a>\n      <br/>\n        <a href=\"#\" (click)=\"onOrderClick($event)\">Orders</a>\n    </div>\n</div>\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-alert',\n  templateUrl: './alert.component.html',\n  styleUrls: ['./alert.component.css'],\n})\nexport class AlertComponent implements OnInit {\n  @Input() message: string;\n  @Output() close = new EventEmitter<void>();\n  constructor() {}\n\n  ngOnInit(): void {}\n  onClose() {\n    this.close.emit();\n  }\n}","<div class=\"backdrop\" (click)=\"onClose()\"></div>\n<div class=\"alert-box\">\n    <p class=\"alert-box-message\">{{ message }}</p>\n    <div class=\"alert-box-actions\">\n        <button class=\"btn btn-danger\" (click)=\"onClose()\">X</button>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport {HttpErrorResponse} from '@angular/common/http';\r\nimport {throwError as observableThrowError} from 'rxjs/internal/observable/throwError';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport abstract class BaseApiService {\r\n\r\n  protected constructor() { }\r\n\r\n  protected handleError(res: HttpErrorResponse | any): any {\r\n    console.error(res.error || res.body.error);\r\n    return observableThrowError(res.error || 'Server error');\r\n  }\r\n}\r\n","import { Directive, HostListener, HostBinding } from '@angular/core';\n\n@Directive({\n  selector: '[appDropdown]',\n  exportAs: 'appDropdown'\n})\nexport class DropdownDirective {\n  @HostBinding('class.open') isOpen = false;\n\n  constructor() {}\n  @HostListener('click') toggleOpen() {\n    this.isOpen = !this.isOpen;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  rootUrl: 'https://ake.qulix.com/api',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","export class HandleAlert{\r\n  message: string;\r\n\r\n  public onHandleAlert(): void{\r\n    this.message = '';\r\n  }\r\n}\r\n","export class BookUploadModel{\r\n  id!: number;\r\n  name!: string;\r\n  price!: number;\r\n  description!: string;\r\n  image!: File;\r\n  authorId!: number;\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { Router } from '@angular/router';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthorService} from '../../../../../@core/services/author.service';\nimport {AuthorModel} from '../../../../../@core/models/author.model';\nimport {HandleAlert} from '../../../../../@core/components/handle.alert';\n\n@Component({\n  selector: 'app-author-add',\n  templateUrl: './author-add.component.html',\n  styleUrls: ['./author-add.component.css'],\n})\nexport class AuthorAddComponent extends HandleAlert implements OnInit {\n\n  authorForm: FormGroup;\n\n  constructor(private authorService: AuthorService, private router: Router) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n  onSubmit(): void {\n/*    if (!this.bookForm.valid) {\n      return;\n    }*/\n    const authorModel = new AuthorModel();\n    authorModel.bornDate = this.authorForm.value.bornDate;\n    authorModel.description = this.authorForm.value.description;\n    authorModel.name = this.authorForm.value.name;\n    authorModel.diedDate = this.authorForm.value.diedDate;\n    if (authorModel.diedDate == null || authorModel.diedDate.toString() === ''){\n      authorModel.diedDate = new Date('0001-01-01');\n    }\n\n    this.authorService.AddAuthor(authorModel).subscribe(value => {\n      this.router.navigate(['authors']);\n    },\n      error => {\n      this.message = 'Error on server side.';\n    });\n  }\n  private initForm(): void {\n    this.authorForm = new FormGroup({\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.pattern('^([a-zA-Z]{2,}\\\\s[a-zA-Z]{1,}\\'?-?[a-zA-Z]{2,}\\\\s?([a-zA-Z]{1,})?)'),\n        Validators.maxLength(255),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(1000),\n      ]),\n      bornDate: new FormControl(null, Validators.required),\n      diedDate: new FormControl(null)\n    });\n  }\n\n  public onReturnToListClick(): void{\n    this.router.navigate(['authors']);\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n  <app-alert [message]=\"message\" (close)=\"onHandleAlert()\" *ngIf=\"message\"></app-alert>\n  <div class=\"row\">\n    <div class=\"col col-lg-9 mx-auto\">\n      <h1>Author add</h1>\n      <h3 (click)=\"onReturnToListClick()\">Return to list</h3>\n      <form class=\"justify-content-center\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"authorForm\">\n        <div class=\"form-group\">\n          <label for=\"name\">Name: </label>\n          <input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" formControlName=\"name\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('name').valid && authorForm.get('name').touched\">Author name is invalid or not provided</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"description\">Description: </label>\n          <input type=\"text\" id=\"description\" class=\"form-control\" name=\"description\" formControlName=\"description\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('description').valid && authorForm.get('description').touched\">Description is invalid or not provided.</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"bornDate\">BornDate: </label>\n          <input type=\"date\" id=\"bornDate\" class=\"form-control\" name=\"bornDate\" formControlName=\"bornDate\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('bornDate').valid && authorForm.get('bornDate').touched\">Born date is invalid or not provided</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"diedDate\">DiedDate: </label>\n          <input type=\"date\" id=\"diedDate\" class=\"form-control\" name=\"diedDate\" formControlName=\"diedDate\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('diedDate').valid && authorForm.get('diedDate').touched\">Died date is invalid or not provided</span>\n        </div>\n\n        <div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authorForm.valid\">\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../@core/services/user.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent implements OnInit {\n\n  constructor(private userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n    if (this.userService.HasAccessToken()){\n      this.router.navigate(['menu']);\n    }\n  }\n\n}\n","<div class=\"app-view\">\n  <div class=\"auth\">\n    <div class=\"container\">\n      <app-login></app-login>\n    </div>\n  </div>\n</div>\n","import {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree,\n  Router,\n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {UserService} from '../../@core/services/user.service';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthGuard implements CanActivate {\n  constructor(public userService: UserService, public router: Router) {}\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    // tslint:disable-next-line:max-line-length\n    if (this.userService.GetAccessToken() !== '' || this.userService.GetAccessToken() !== null || this.userService.GetAccessToken() !== undefined) {\n      return true;\n    } else {\n      this.router.navigate(['/home']);\n      return false;\n    }\n  }\n}\n","import {UserModel} from './user.model';\r\nimport {AddressModel} from './address.model';\r\nimport {BookModel} from './book.model';\r\n\r\nexport class OrderModel{\r\n  id!: number;\r\n  cost!: number;\r\n  finalCost!: number;\r\n  bonuses!: number;\r\n  status!: number;\r\n  user!: UserModel;\r\n  address!: AddressModel;\r\n  name!: string;\r\n  phone!: string;\r\n  books!: BookModel[];\r\n}\r\n","export class AuthorModel{\r\n  id!: number;\r\n  name!: string;\r\n  description!: string;\r\n  bornDate!: Date;\r\n  diedDate!: Date;\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'boobook-admin-panel';\n}\n","<app-header></app-header>\n\n<router-outlet></router-outlet>","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError as observableThrowError} from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport {Endpoints} from \"../constants/endpoints\";\r\nimport {OrderModel} from \"../models/order.model\";\r\nimport {UserService} from \"./user.service\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class OrderService {\r\n\r\n  constructor(private http: HttpClient,private endpoints: Endpoints, private userService: UserService) {\r\n  }\r\n\r\n  public getOrders() : Observable<OrderModel[]>{\r\n    const url = this.endpoints.getOrdersUrl();\r\n\r\n    return this.http\r\n      .get<OrderModel[]>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public MarkOrderAsDelivered(idDelivered: number): Observable<OrderModel>{\r\n    const url = this.endpoints.getOrdersUrl();\r\n\r\n    const orderModel = new OrderModel();\r\n    orderModel.id = idDelivered;\r\n    orderModel.status = 2;\r\n\r\n    return this.http\r\n      .put<OrderModel>(url, orderModel, this.userService.GetAccessHeader());\r\n  }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport { Router } from '@angular/router';\nimport {BookService} from '../../../../@core/services/book.service';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthorModel} from '../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../@core/services/author.service';\nimport {BookUploadModel} from '../../../../@core/models/book.upload.model';\nimport {HandleAlert} from '../../../../@core/components/handle.alert';\n\n@Component({\n  selector: 'app-book-add',\n  templateUrl: './book-add.component.html',\n  styleUrls: ['./book-add.component.css'],\n})\nexport class BookAddComponent extends HandleAlert implements OnInit {\n\n  bookForm: FormGroup;\n  authors: AuthorModel[];\n  imageToDisplay: string;\n\n  constructor(private bookService: BookService, private router: Router, private authorService: AuthorService) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.authorService.GetAuthors().subscribe(data => {\n      this.authors = data;\n      console.log(this.authors);\n    });\n    this.initForm();\n  }\n  onSubmit(): void {\n/*    if (!this.bookForm.valid) {\n      return;\n    }*/\n    const bookUploadModel = new BookUploadModel();\n    bookUploadModel.authorId = this.bookForm.value.authorId;\n    bookUploadModel.description = this.bookForm.value.description;\n    bookUploadModel.name = this.bookForm.value.name;\n    bookUploadModel.price = this.bookForm.value.price;\n    bookUploadModel.image = this.bookForm.value.image;\n\n    this.bookService.addBook(bookUploadModel).subscribe(value => {\n      this.router.navigate(['books']);\n    },\n      error => {\n      this.message = 'Error on server side.';\n    });\n  }\n  private initForm(): void {\n    this.bookForm = new FormGroup({\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(100),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(1000),\n      ]),\n      price: new FormControl(null, [\n        Validators.required,\n        Validators.pattern('^[0-9]+$'),\n        Validators.maxLength(3),\n      ]),\n      authorId: new FormControl(null, Validators.required),\n      image: new FormControl(null, Validators.required)\n    });\n  }\n\n  public onReturnToListClick(): void{\n    this.router.navigate(['books']);\n  }\n\n  public onFileSelect(event): void {\n    if (event.target.files.length > 0) {\n      const file = event.target.files[0];\n      this.bookForm.get('image').setValue(file);\n      this.getBase64(file);\n    }\n  }\n\n  private getBase64(file): void {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      this.imageToDisplay = reader.result as string;\n    };\n    reader.onerror =  (error) => {\n      console.log('Error: ', error);\n    };\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n    <app-alert [message]=\"message\" (close)=\"onHandleAlert()\" *ngIf=\"message\"></app-alert>\n    <div class=\"row\">\n        <div class=\"col col-lg-9 mx-auto\">\n            <h1>Book add</h1>\n            <form class=\"book-form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"bookForm\">\n                <div *ngIf=\"imageToDisplay\" class=\"form-group\">\n                    <img id=\"bookImg\" [src]=\"imageToDisplay\">\n                </div>\n                <div>\n                    <div class=\"form-group\">\n                        <label for=\"image\">Image: </label>\n                        <input type=\"file\" id=\"image\" class=\"form-control\" name=\"image\" accept=\".png, .jpg, .jpeg\" (change)=\"onFileSelect($event)\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('image').valid && bookForm.get('image').touched\">Image is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"name\">Name: </label>\n                        <input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" formControlName=\"name\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('name').valid && bookForm.get('name').touched\">Name is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"description\">Description: </label>\n                        <textarea id=\"description\" class=\"form-control\" name=\"description\" formControlName=\"description\"></textarea>\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('description').valid && bookForm.get('description').touched\">Description is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"price\">Price: </label>\n                        <input type=\"text\" id=\"price\" class=\"form-control\" name=\"price\" formControlName=\"price\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('price').valid && bookForm.get('price').touched\">Price is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"authorId\">Author: </label>\n                        <select id=\"authorId\" class=\"form-control\" name=\"authorId\" formControlName=\"authorId\">\n              <option *ngFor=\"let author of authors\" [value]=\"author.id\">{{author.name}}</option>\n            </select>\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('authorId').valid && bookForm.get('authorId').touched\">Author is invalid or not provided</span>\n                    </div>\n\n                    <div>\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!bookForm.valid\">\n              Save\n            </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AlertComponent } from './alert/alert.component';\nimport { AuthComponent } from './auth/auth.component';\nimport { LoginComponent } from './auth/login/login.component';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AuthGuard } from './auth/auth.guard';\nimport { DropdownDirective } from './dropdown.directive';\nimport {MenuComponent} from './components/menu/menu.component';\nimport {AuthorItemComponent} from './components/authors/room-list/author-item/author-item.component';\nimport {AuthorListComponent} from './components/authors/room-list/author-list.component';\nimport {BookItemComponent} from './components/books/book-item/book-item.component';\nimport {BookListComponent} from './components/books/book-list.component';\nimport {BookAddComponent} from './components/books/book-add/book-add.component';\nimport {AuthorAddComponent} from './components/authors/room-list/author-add/author-add.component';\nimport {OrderListComponent} from './components/orders/room-list/order-list.component';\nimport {OrderItemComponent} from './components/orders/room-list/order-item/order-item.component';\nimport {AuthorUpdateComponent} from './components/authors/room-list/author-update/author-update.component';\nimport {BookUpdateComponent} from './components/books/book-update/book-update.component';\nimport {DatePipe} from '@angular/common';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'auth', pathMatch: 'full' },\n  {\n    path: 'auth',\n    component: AuthComponent,\n  },\n\n  {path: 'menu', component: MenuComponent, canActivate: [AuthGuard]},\n  {path: 'books', component: BookListComponent,  canActivate: [AuthGuard]},\n  {path: 'authors', component: AuthorListComponent,  canActivate: [AuthGuard]},\n  {path: 'orders', component: OrderListComponent,  canActivate: [AuthGuard]},\n  {path: 'books/add', component: BookAddComponent,  canActivate: [AuthGuard]},\n  {path: 'authors/add', component: AuthorAddComponent,  canActivate: [AuthGuard]},\n  {path: 'authors/update/:id', component: AuthorUpdateComponent, canActivate: [AuthGuard]},\n  {path: 'books/update/:id', component: BookUpdateComponent, canActivate: [AuthGuard]}\n];\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n\n    AlertComponent,\n    AuthComponent,\n    LoginComponent,\n    DropdownDirective,\n    MenuComponent,\n    AuthorItemComponent,\n    AuthorListComponent,\n    BookItemComponent,\n    BookListComponent,\n    HeaderComponent,\n    BookAddComponent,\n    AuthorAddComponent,\n    OrderListComponent,\n    OrderItemComponent,\n    AuthorUpdateComponent,\n    BookUpdateComponent\n  ],\n  imports: [\n    RouterModule.forRoot(routes),\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [RouterModule,  DropdownDirective, ],\n  providers: [AuthGuard, DatePipe],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import {Injectable} from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class Endpoints{\r\n  public getBooksUrl(): string{\r\n    return endpoints.rootUrl + '/books';\r\n  }\r\n\r\n  public getOrdersUrl(): string{\r\n    return endpoints.rootUrl + '/orders';\r\n  }\r\n\r\n  public getAuthorsUrl(): string{\r\n    return endpoints.rootUrl + '/authors';\r\n  }\r\n\r\n  public getLoginUrl(): string{\r\n    return endpoints.rootUrl + '/users/login';\r\n  }\r\n\r\n  public getRootUrl(): string{\r\n    return endpoints.rootUrl;\r\n  }\r\n}\r\n\r\nconst endpoints = {\r\n  rootUrl: environment.rootUrl,\r\n};\r\n\r\n","import {UserService} from '../../../@core/services/user.service';\n\nexport interface LoginResponse {\n  status: string;\n  data: any;\n  token: string;\n  message: string;\n  is_admin?: number;\n}\n\nimport { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport {AbstractControl, FormControl, FormGroup, Validators} from '@angular/forms';\nimport { Router } from '@angular/router';\nimport {Endpoints} from '../../../@core/constants/endpoints';\nimport {Observable} from 'rxjs';\nimport {LoginModel} from '../../../@core/models/login.model';\nimport {RequestUserModel} from '../../../@core/models/reuest.user.model';\nimport {HandleAlert} from '../../../@core/components/handle.alert';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent extends HandleAlert implements OnInit {\n  loginForm: FormGroup;\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private userService: UserService,\n    private endpoints: Endpoints\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  public onSubmit(): void {\n    if (!this.loginForm.valid) {\n      return;\n    }\n    const email = this.loginForm.value.email;\n\n    const password = this.loginForm.value.password;\n    const loginModel: RequestUserModel = new RequestUserModel(email, password);\n\n    this.login(loginModel).subscribe(\n      (res: LoginModel) => {\n        if (res.role === 1){\n          this.userService.SetAccessToken(res.accessToken);\n          this.router.navigate(['/menu']);\n        }\n        else {\n          this.message = 'User is not admin';\n        }\n        },\n      error => {\n        this.message = 'Credits are invalid';\n        this.loginForm.get('password').reset();\n      }\n    );\n  }\n\n  private login(loginModel: RequestUserModel): Observable<LoginModel> {\n    return this.userService.Login(loginModel);\n  }\n\n\n  private initForm(): void {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [\n        Validators.email,\n        Validators.required,\n        Validators.maxLength(255),\n      ]),\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(255),\n      ]),\n    });\n  }\n  get f(): any {\n    return this.loginForm.controls;\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n    <div class=\"row\">\n        <div class=\"col col-lg-9 mx-auto\">\n            <app-alert [message]=\"message\" (close)=\"onHandleAlert()\" *ngIf=\"message\"></app-alert>\n            <form class=\"justify-content-center\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"loginForm\">\n                <div class=\"form-group \">\n                    <label for=\"email\">E-Mail</label>\n                    <input type=\"email\" id=\"email\" class=\"form-control\" name=\"email\" #email formControlName=\"email\">\n                    <span class=\"form-text\" *ngIf=\"!loginForm.get('email').valid && loginForm.get('email').touched\">Email is not provided or invalid</span>\n                </div>\n\n                <div class=\"form-group\">\n                    <label for=\"password\">Password</label>\n                    <input type=\"password\" id=\"password\" class=\"form-control\" name=\"password\" formControlName=\"password\" />\n                    <span class=\"form-text\" *ngIf=\"!loginForm.get('password').valid && loginForm.get('password').touched\">Password is not provided</span>\n                </div>\n\n                <div class=\"button-container\">\n                    <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!loginForm.valid\">\n                      Log in\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n","<nav class=\"navbar navbar-expand-xl navbar-custom\">\n    <div class=\"container-fluid header-custom\">\n        <div>\n            <a class=\"navbar-brand hotel-link\" routerLink=\"/auth\">BooBook</a>\n        </div>\n    </div>\n    <div *ngIf=\"userService.HasAccessToken()\">\n        <a class=\"logout\" (click)=\"onLogout()\">Logout</a>\n    </div>\n\n\n    <div class=\"nav-item dropdown right\" appDropdown #r=\"appDropdown\" *ngIf=\"userService.HasAccessToken()\">\n        <a class=\"nav-link dropdown-toggle manage\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  Manage\n                </a>\n        <ul class=\"dropdown-menu\" [ngClass]=\"{'show':r.isOpen}\" aria-labelledby=\"navbarDropdown\">\n            <li><a class=\"dropdown-item\" routerLink=\"/authors\">Authors</a></li>\n            <li>\n                <hr class=\"dropdown-divider\">\n            </li>\n            <li>\n              <a class=\"dropdown-item\" routerLink=\"/books\">Books</a>\n            </li>\n            <li>\n                <hr class=\"dropdown-divider\">\n            </li>\n            <li>\n              <a class=\"dropdown-item\" routerLink=\"/orders\">Orders</a>\n            </li>\n        </ul>\n    </div>\n\n\n\n</nav>\n","import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../../@core/services/user.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.css']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor(public userService: UserService, private router: Router) { }\n\n  ngOnInit(): void {\n  }\n  onLogout(): void {\n    this.userService.SetAccessToken('');\n    this.router.navigate(['auth']);\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthorService} from '../../../../../@core/services/author.service';\nimport {AuthorModel} from '../../../../../@core/models/author.model';\nimport {formatDate} from '@angular/common';\nimport {HandleAlert} from '../../../../../@core/components/handle.alert';\n\n@Component({\n  selector: 'app-author-update',\n  templateUrl: './author-update.component.html',\n  styleUrls: ['./author-update.component.css'],\n})\nexport class AuthorUpdateComponent extends HandleAlert implements OnInit {\n\n  authorForm: FormGroup;\n  authorModel: AuthorModel;\n  id: number;\n\n  constructor(private authorService: AuthorService, private router: Router, private activateRoute: ActivatedRoute) {\n    super();\n    this.id = activateRoute.snapshot.params.id;\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.authorService.GetAuthor(this.id).subscribe(val => {\n      this.authorForm.controls.name.patchValue(val.name);\n      this.authorForm.controls.description.patchValue(val.description);\n      this.authorForm.controls.bornDate.patchValue(formatDate(val.bornDate, 'yyyy-MM-dd', 'en'));\n      if (new Date(val.diedDate).toLocaleDateString() !== new Date('0001-01-01').toLocaleDateString()){\n        this.authorForm.controls.diedDate.patchValue(formatDate(val.diedDate, 'yyyy-MM-dd', 'en'));\n      }\n    });\n  }\n  onSubmit(): void {\n    const authorModel = new AuthorModel();\n    authorModel.id = this.id;\n    authorModel.bornDate = this.authorForm.value.bornDate;\n    authorModel.description = this.authorForm.value.description;\n    authorModel.name = this.authorForm.value.name;\n    authorModel.diedDate = this.authorForm.value.diedDate;\n    if (authorModel.diedDate == null || authorModel.diedDate.toString() === ''){\n      authorModel.diedDate = new Date('0001-01-01');\n    }\n\n    this.authorService.UpdateAuthor(authorModel).subscribe(value => {\n      this.router.navigate(['authors']);\n    },\n      error => {\n      this.message = 'Error on server side.';\n    });\n  }\n\n  private initForm(): void {\n    this.authorForm = new FormGroup({\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.pattern('^([a-zA-Z]{2,}\\\\s[a-zA-Z]{1,}\\'?-?[a-zA-Z]{2,}\\\\s?([a-zA-Z]{1,})?)'),\n        Validators.maxLength(255),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(1000),\n      ]),\n      bornDate: new FormControl(null, Validators.required),\n      diedDate: new FormControl(null)\n    });\n  }\n\n  public onReturnToListClick(): void{\n    this.router.navigate(['authors']);\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n  <app-alert [message]=\"message\" (close)=\"onHandleAlert()\" *ngIf=\"message\"></app-alert>\n  <div class=\"row\">\n    <div class=\"col col-lg-9 mx-auto\">\n      <h1>Author update</h1>\n      <h3 (click)=\"onReturnToListClick()\">Return to list</h3>\n      <form class=\"justify-content-center\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"authorForm\">\n        <div class=\"form-group\">\n          <label for=\"name\">Name: </label>\n          <input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" formControlName=\"name\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('name').valid && authorForm.get('name').touched\">Author name is invalid or not provided</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"description\">Description: </label>\n          <input type=\"text\" id=\"description\" class=\"form-control\" name=\"description\" formControlName=\"description\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('description').valid && authorForm.get('description').touched\">Description is invalid or not provided</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"bornDate\">BornDate: </label>\n          <input type=\"date\" id=\"bornDate\" class=\"form-control\" name=\"bornDate\" formControlName=\"bornDate\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('bornDate').valid && authorForm.get('bornDate').touched\">Born date is invalid or not provided</span>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"diedDate\">DiedDate: </label>\n          <input type=\"date\" id=\"diedDate\" class=\"form-control\" name=\"diedDate\" formControlName=\"diedDate\">\n          <span class=\"form-text\" *ngIf=\"!authorForm.get('diedDate').valid && authorForm.get('diedDate').touched\">Died date is invalid or not provided</span>\n        </div>\n\n        <div>\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authorForm.valid\">\n            Save\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>\n","<div>\n    <div>\n        <app-order-item *ngFor=\"let order of orders; let i = index;\" [order]=\"order\"> </app-order-item>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {AuthorModel} from '../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../@core/services/author.service';\nimport {Router} from '@angular/router';\nimport {OrderModel} from '../../../../@core/models/order.model';\nimport {OrderService} from '../../../../@core/services/order.service';\n\n@Component({\n  selector: 'app-order-list',\n  templateUrl: './order-list.component.html',\n  styleUrls: ['./order-list.component.css']\n})\nexport class OrderListComponent implements OnInit {\n  orders: OrderModel[];\n\n  constructor(private orderService: OrderService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.orderService.getOrders().subscribe(res => {\n      this.orders = res;\n    });\n  }\n}\n","<div>\n    <button class=\"btn btn-outline-secondary add-button\" (click)=\"onClickAdd()\">Add new</button>\n    <div>\n        <app-author-item *ngFor=\"let author of authors; let i = index;\" [author]=\"author\" (OnDelete)=\"onDelete(author.id)\"> </app-author-item>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {AuthorModel} from '../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../@core/services/author.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-author-list',\n  templateUrl: './author-list.component.html',\n  styleUrls: ['./author-list.component.css']\n})\nexport class AuthorListComponent implements OnInit {\n  authors: AuthorModel[];\n\n  constructor(private authorService: AuthorService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.authorService.GetAuthors().subscribe(res => {\n      this.authors = res;\n    });\n  }\n\n  public onClickAdd(): void{\n    this.router.navigate(['/authors/add']);\n  }\n\n  public onDelete(id: number): void{\n    this.authors = this.authors.filter(author => author.id !== id);\n  }\n}\n","export class RequestUserModel{\r\n  constructor(email: string, password: string) {\r\n    this.Email = email;\r\n    this.Password = password;\r\n  }\r\n  Email: string;\r\n  Password: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError as observableThrowError} from 'rxjs';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Endpoints} from '../constants/endpoints';\r\nimport {OrderModel} from '../models/order.model';\r\nimport {BookModel} from '../models/book.model';\r\nimport {UserService} from './user.service';\r\nimport {BookUploadModel} from '../models/book.upload.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BookService {\r\n\r\n  constructor(private http: HttpClient, private endpoints: Endpoints, private userService: UserService) {\r\n  }\r\n\r\n  public getBooks(): Observable<BookModel[]>{\r\n    const url = this.endpoints.getBooksUrl();\r\n\r\n    return this.http\r\n      .get<BookModel[]>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public getBook(id: number): Observable<BookModel>{\r\n    const url = this.endpoints.getBooksUrl() + '/' + id;\r\n\r\n    return this.http\r\n      .get<BookModel>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public addBook(bookUploadModel: BookUploadModel): Observable<BookModel>{\r\n    const url = this.endpoints.getBooksUrl();\r\n\r\n    const formData = new FormData();\r\n    for (const prop in bookUploadModel) {\r\n      if (!bookUploadModel.hasOwnProperty(prop)) { continue; }\r\n      if (prop === 'image'){\r\n        formData.append(prop, bookUploadModel[prop], 'filename');\r\n      }\r\n      else{\r\n        formData.append(prop, bookUploadModel[prop]);\r\n      }\r\n    }\r\n    return this.http\r\n      .post<BookModel>(url, formData, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public deleteBook(id: number): Observable<any>{\r\n    const url = this.endpoints.getBooksUrl() + '/' + id;\r\n\r\n    return this.http\r\n      .delete<any>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n}\r\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BookModel} from '../../../../@core/models/book.model';\nimport {BookService} from '../../../../@core/services/book.service';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {AuthorModel} from '../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../@core/services/author.service';\nimport {BookUploadModel} from '../../../../@core/models/book.upload.model';\nimport {formatDate} from '@angular/common';\nimport {HandleAlert} from '../../../../@core/components/handle.alert';\n\n@Component({\n  selector: 'app-book-update',\n  templateUrl: './book-update.component.html',\n  styleUrls: ['./book-update.component.css'],\n})\nexport class BookUpdateComponent extends HandleAlert implements OnInit {\n\n  bookForm: FormGroup;\n  id: number;\n  bookModel: BookModel;\n  authors: AuthorModel[];\n  imageToDisplay: string;\n\n  constructor(private bookService: BookService, private router: Router,\n              private authorService: AuthorService, private activateRoute: ActivatedRoute) {\n    super();\n    this.id = activateRoute.snapshot.params.id;\n  }\n\n  ngOnInit(): void {\n    this.authorService.GetAuthors().subscribe(data => {\n      this.authors = data;\n    });\n    this.initForm();\n    this.bookService.getBook(this.id).subscribe(val => {\n      this.bookForm.controls.name.patchValue(val.name);\n      this.bookForm.controls.description.patchValue(val.description);\n      this.bookForm.controls.authorId.patchValue(val.author?.id);\n      this.bookForm.controls.price.patchValue(val.price);\n      this.imageToDisplay = 'data:image/png;base64,' + val.image;\n      this.bookForm.get('image').setValue(this.dataURLtoFile(this.imageToDisplay, 'test.png'));\n    });\n  }\n  onSubmit(): void {\n    const bookUploadModel = new BookUploadModel();\n    bookUploadModel.id = this.id;\n    bookUploadModel.authorId = this.bookForm.value.authorId;\n    bookUploadModel.description = this.bookForm.value.description;\n    bookUploadModel.name = this.bookForm.value.name;\n    bookUploadModel.price = this.bookForm.value.price;\n    bookUploadModel.image = this.bookForm.value.image;\n    this.bookService.addBook(bookUploadModel).subscribe(value => {\n      this.router.navigate(['books']);\n    },\n      error => {\n      this.message = 'Error on server side.';\n    });\n  }\n\n  private initForm(): void {\n    this.bookForm = new FormGroup({\n      name: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(100),\n      ]),\n      description: new FormControl(null, [\n        Validators.required,\n        Validators.maxLength(1000),\n      ]),\n      price: new FormControl(null, [\n        Validators.required,\n        Validators.pattern('^[0-9]+$'),\n        Validators.maxLength(3),\n      ]),\n      authorId: new FormControl(null, Validators.required),\n      image: new FormControl(null, Validators.required)\n    });\n  }\n\n  public onReturnToListClick(): void{\n    this.router.navigate(['books']);\n  }\n\n  public onFileSelect(event): void {\n    if (event.target.files.length > 0) {\n      const file: File = event.target.files[0];\n      this.bookForm.get('image').setValue(file);\n      this.getBase64(file);\n    }\n  }\n\n  private getBase64(file): void {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      this.imageToDisplay = reader.result as string;\n    };\n    reader.onerror =  (error) => {\n      console.log('Error: ', error);\n    };\n  }\n\n  private dataURLtoFile(dataurl, filename): File {\n\n    const arr = dataurl.split(',');\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n\n    while (n--){\n      u8arr[n] = bstr.charCodeAt(n);\n    }\n\n    return new File([u8arr], filename, {type: mime});\n  }\n}\n","<div class=\"container\" style=\"margin-top: 20px;\">\n    <app-alert [message]=\"message\" (close)=\"onHandleAlert()\" *ngIf=\"message\"></app-alert>\n    <div class=\"row\">\n        <div class=\"col col-lg-9 mx-auto\">\n            <h1>Book update</h1>\n            <form class=\"book-form\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"bookForm\">\n                <div class=\"form-group\">\n                    <img id=\"bookImg\" [src]=\"imageToDisplay\">\n                </div>\n                <div>\n                    <div class=\"form-group\">\n                        <label for=\"image\"><b>Image:</b></label>\n                        <input type=\"file\" id=\"image\" class=\"form-control\" name=\"image\" accept=\".png, .jpg, .jpeg\" (change)=\"onFileSelect($event)\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('image').valid && bookForm.get('image').touched\">Image is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"name\"><b>Name:</b></label>\n                        <input type=\"text\" id=\"name\" class=\"form-control\" name=\"name\" formControlName=\"name\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('name').valid && bookForm.get('name').touched\">Name is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"description\"><b>Description:</b></label>\n                        <textarea id=\"description\" class=\"form-control\" name=\"description\" formControlName=\"description\"></textarea>\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('description').valid && bookForm.get('description').touched\">Description is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"price\"><b>Price:</b></label>\n                        <input type=\"text\" id=\"price\" class=\"form-control\" name=\"price\" formControlName=\"price\">\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('price').valid && bookForm.get('price').touched\">Price is invalid or not provided</span>\n                    </div>\n\n                    <div class=\"form-group\">\n                        <label for=\"authorId\"><b>Author:</b></label>\n                        <select id=\"authorId\" class=\"form-control\" name=\"authorId\" formControlName=\"authorId\">\n              <option *ngFor=\"let author of authors\" [value]=\"author.id\">{{author.name}}</option>\n            </select>\n                        <span class=\"form-text\" *ngIf=\"!bookForm.get('authorId').valid && bookForm.get('authorId').touched\">Author is invalid or not provided</span>\n                    </div>\n\n                    <div>\n                        <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!bookForm.valid\">\n              Save\n            </button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>","<div *ngIf=\"order.status == 1\" class=\"list-group-item field\" xmlns=\"http://www.w3.org/1999/html\">\n    <div class=\"room-field\">\n        <div class=\"text-part\">\n          <p><b>Name:</b> {{order.name}} </p>\n          <p><b>Phone:</b> {{order.phone}}</p>\n          <p><b>Final Cost:</b> {{order.finalCost}}</p>\n          <p><b>Cost:</b> {{order.cost}}</p>\n          <p><b>Bonuses:</b> {{order.bonuses}}</p>\n          <p><b>City:</b> {{order.address.city}}</p>\n          <p><b>Street:</b> {{order.address.street}}</p>\n          <p><b>House:</b> {{order.address.house}}</p>\n          <p><b>Flat:</b> {{order.address.flat}}</p>\n          <p><b>Code:</b> {{order.address.code}}</p>\n          <p><b>Books:</b></p>\n            <ul>\n              <li *ngFor=\"let book of order.books\">\n                <span>{{book.name}} ({{book.count}} copy)<br/></span>\n              </li>\n            </ul>\n            <button class=\"btn btn-outline-success\" type=\"button\" (click)=\"onDeliveredClick()\">Set as delivered</button>\n        </div>\n    </div>\n</div>\n","import { Component, Input, OnInit } from '@angular/core';\nimport {AuthorModel} from '../../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../../@core/services/author.service';\nimport {OrderModel} from '../../../../../@core/models/order.model';\nimport {OrderService} from '../../../../../@core/services/order.service';\n\n@Component({\n  selector: 'app-order-item',\n  templateUrl: './order-item.component.html',\n  styleUrls: ['./order-item.component.css'],\n})\nexport class OrderItemComponent implements OnInit {\n  @Input() order: OrderModel;\n\n  constructor(private orderService: OrderService\n  ) {}\n\n  public onDeliveredClick(): void {\n    this.orderService.MarkOrderAsDelivered(this.order.id).subscribe(val => this.order.status = val.status);\n  }\n\n  ngOnInit(): void {\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError as observableThrowError} from 'rxjs';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Endpoints} from '../constants/endpoints';\r\nimport {BaseApiService} from './base.api.service';\r\nimport {AuthorModel} from '../models/author.model';\r\nimport {UserService} from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorService extends BaseApiService {\r\n\r\n  constructor(private http: HttpClient, private endpoints: Endpoints, private userService: UserService) {\r\n    super();\r\n  }\r\n\r\n  public GetAuthors(): Observable<AuthorModel[]>{\r\n    const url = this.endpoints.getAuthorsUrl();\r\n    return this.http\r\n      .get<AuthorModel[]>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public GetAuthor(id: number): Observable<AuthorModel>{\r\n    const url = this.endpoints.getAuthorsUrl() + '/' + id;\r\n\r\n    return this.http\r\n      .get<AuthorModel>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public AddAuthor(author: AuthorModel): Observable<AuthorModel>{\r\n    const url = this.endpoints.getAuthorsUrl();\r\n\r\n    return this.http\r\n      .post<AuthorModel>(url, author, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public UpdateAuthor(author: AuthorModel): Observable<AuthorModel>{\r\n    const url = this.endpoints.getAuthorsUrl();\r\n\r\n    return this.http\r\n      .put<AuthorModel>(url, author, this.userService.GetAccessHeader());\r\n  }\r\n\r\n  public DeleteAuthor(id: number): Observable<any>{\r\n    const url = this.endpoints.getAuthorsUrl() + '/' + id;\r\n\r\n    return this.http\r\n      .delete<any>(url, this.userService.GetAccessHeader());\r\n  }\r\n\r\n}\r\n","<div>\n    <div>\n        <button class=\"btn btn-outline-secondary add-button\" (click)=\"onClickAdd()\">Add new</button>\n        <app-room-item *ngFor=\"let book of books; let i = index;\" [book]=\"book\" (OnDelete)=\"onDelete(book.id)\"> </app-room-item>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {BookModel} from '../../../@core/models/book.model';\nimport {BookService} from '../../../@core/services/book.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-book-list',\n  templateUrl: './book-list.component.html',\n  styleUrls: ['./book-list.component.css']\n})\nexport class BookListComponent implements OnInit {\n  books: BookModel[];\n\n  constructor(private bookService: BookService, private router: Router) { }\n\n  ngOnInit(): void {\n    this.bookService.getBooks().subscribe(res => {\n      this.books = res;\n    });\n  }\n\n  public onClickAdd(): void{\n    this.router.navigate(['/books/add']);\n  }\n\n  public onReturnToMenuClick(): void {\n    this.router.navigate(['menu']);\n  }\n\n  public onDelete(id: number): void{\n    this.books = this.books.filter(author => author.id !== id);\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AuthorModel} from '../../../../../@core/models/author.model';\nimport {AuthorService} from '../../../../../@core/services/author.service';\nimport {Router} from '@angular/router';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  selector: 'app-author-item',\n  templateUrl: './author-item.component.html',\n  styleUrls: ['./author-item.component.css'],\n})\nexport class AuthorItemComponent implements OnInit {\n  @Input() author: AuthorModel;\n\n  private DATE_FORMAT = 'yyyy-MM-dd';\n\n  @Output()\n  OnDelete: EventEmitter<any> = new EventEmitter();\n  constructor(private authorService: AuthorService, private router: Router, private datePipe: DatePipe\n  ) {\n  }\n\n  public onDeleteClick(): void {\n    this.authorService.DeleteAuthor(this.author.id).subscribe(val => val);\n    this.OnDelete.emit();\n  }\n\n  public onUpdateClick(): void {\n    this.router.navigate(['authors/update', this.author.id]);\n  }\n\n  public getBornDate(): string{\n    const date = new Date(this.author.bornDate);\n    return this.datePipe.transform(date, this.DATE_FORMAT);\n  }\n\n  public getDiedDate(): string{\n    const date = new Date(this.author.diedDate);\n    return this.datePipe.transform(date, this.DATE_FORMAT);\n  }\n\n  public IsDead(): boolean {\n    return new Date(this.author.diedDate).toLocaleDateString() !== new Date('0001-01-01').toLocaleDateString();\n  }\n\n  ngOnInit(): void {\n  }\n}\n","<div class=\"list-group-item field\">\n    <div class=\"room-field\">\n        <div class=\"text-part\">\n            <p> <b>Name:</b> {{author.name}} </p>\n            <p> <b>Description:</b> {{author.description}}</p>\n            <p> <b>Born Date:</b> {{getBornDate()}}</p>\n            <p *ngIf=\"IsDead()\"> <b>Died Date:</b> {{getDiedDate()}}</p>\n            <button class=\"btn btn-outline-success\" type=\"button\" (click)=\"onUpdateClick()\">Update</button>\n            <button class=\"btn btn-outline-danger\" style=\"margin-top: 5px\" type=\"button\" (click)=\"onDeleteClick()\">Delete</button>\n        </div>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport {Observable, of, throwError as observableThrowError} from 'rxjs';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Endpoints} from '../constants/endpoints';\r\nimport {OrderModel} from '../models/order.model';\r\nimport {LoginModel} from '../models/login.model';\r\nimport {RequestUserModel} from '../models/reuest.user.model';\r\nimport {catchError, map} from 'rxjs/operators';\r\nimport {BaseApiService} from './base.api.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService extends BaseApiService {\r\n\r\n  constructor(private http: HttpClient, private endpoints: Endpoints) {\r\n    super();\r\n  }\r\n\r\n  public Login(requestUser: RequestUserModel): Observable<LoginModel>{\r\n    let url = this.endpoints.getLoginUrl();\r\n    url = url + '?email=' + requestUser.Email + '&password=' + requestUser.Password;\r\n    const headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\r\n    headers.append('Accept', 'application/json');\r\n\r\n    return this.http\r\n      .post<LoginModel>(url, requestUser, {headers});\r\n  }\r\n\r\n  public SetAccessToken(accessToken: string): void{\r\n    localStorage.setItem('BooBook.Token', accessToken);\r\n  }\r\n\r\n  public GetAccessToken(): string{\r\n    return localStorage.getItem('BooBook.Token');\r\n  }\r\n\r\n  public GetAccessHeader(): {headers: HttpHeaders}{\r\n    return {\r\n      headers: new HttpHeaders()\r\n        .set('Authorization',  `Bearer ${this.GetAccessToken()}`)\r\n    };\r\n  }\r\n\r\n  public HasAccessToken(): boolean{\r\n    const token =  localStorage.getItem('BooBook.Token');\r\n    return token !== '' && token != null;\r\n  }\r\n\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}